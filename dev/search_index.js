var documenterSearchIndex = {"docs":
[{"location":"#TimeseriesBase","page":"Home","title":"TimeseriesBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for TimeseriesBase, a Julia package for working with time series data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The TimeseriesBase package provides a standardized collection of types designed for handling various types of time-series data. Defining consistent types for time series provides three key benefits:","category":"page"},{"location":"","page":"Home","title":"Home","text":"It simplifies the workspace and method signatures by aggregating much of the data that defines a time series into a single variable; thanks to the DimensionalData.jl package, one variable can hold the values of a time series, its time points, spatial coordinates, units, metadata, and more.\nIt facilitates generic functions that dispatch on the various types of time series; for instance, more efficient algorithms can be written for RegularTimeseries types than for IrregularTimeseries types, but the same high-level functionality can be provided by the same generic function that dispatches these methods given the type of the input time series.\nMost importantly, this intuitively aligns the structure of time-series data in code to mathematical conventions, which can vastly simplify the process of developing and interpreting programs. Many small complexities (Was this time series regularly sampled? What are the output frequencies of my Fourier transform? The units of my power spectrum?) are handled effortlessly, leaving room to focus on higher-level problems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To achieve this, TimeseriesBase.jl defines a custom version of the DimensionalData.DimArray and custom DimensionalData.Dimensions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"x = Timeseries(1:10, rand(10))\nx isa AbstractToolsArray # In most cases, an AbstractToolsArray behaves like a DimArray; see DimensionalData\nx isa AbstractTimeseries # An AbstractTimeseries is an AbstractToolsArray...\nlookup(x, 1) isa 洧노 # ...where the first dimension is a custom TimeDim 洧노","category":"page"},{"location":"","page":"Home","title":"Home","text":"If a ToolsArray or DimArray has a 洧노 as its first dimension, it will be rebuilt as a ToolsArray (i.e. when using functions like eachcol). There are a small number of other custom dimensions, all exported, that share this property and are subtypes of ToolsDimension: e.g. 洧논, 洧녽, 洧녾, 洧녭,Var, Obs. To define more of these ToolsDimensions, use:","category":"page"},{"location":"","page":"Home","title":"Home","text":"DimensionalData.@dim NewDim ToolsDim \"NameOfNewDim\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please note that functions operating on a ToolsArray without a ToolsDimension as the first or last dimension may NOT return a ToolsArray, especially if they perform slicing and rebuilding. Be careful using the DimensionalData.Dim{:name} syntax.","category":"page"},{"location":"#TimeseriesBase.ToolsArrays.ToolsDimension","page":"Home","title":"TimeseriesBase.ToolsArrays.ToolsDimension","text":"ToolsDimension\n\nA union of all Dimension types that fall within the scope of TimeseriesBase. Analogous to DimensionalData.Dimension for dispatch purposes.\n\nSee also\n\nToolsDim\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.ToolsArrays.AbstractToolsArray","page":"Home","title":"TimeseriesBase.ToolsArrays.AbstractToolsArray","text":"A local type to avoid overloading and piracy issues with DimensionalData.jl\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.ToolsArrays.ToolsArray-Tuple{Function, DimensionalData.Dimensions.Dimension}","page":"Home","title":"TimeseriesBase.ToolsArrays.ToolsArray","text":"ToolsArray(f::Function, dim::Dimension; [name])\n\nApply function f across the values of the dimension dim (using broadcast), and return the result as a dimensional array with the given dimension. Optionally provide a name for the result.\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.ToolsArrays.ToolsDim","page":"Home","title":"TimeseriesBase.ToolsArrays.ToolsDim","text":"ToolsDim{T}\n\nAn abstract type for custom macro-defined dimensions in TimeseriesBase. Analogous to DimensionalData.Dimension for the purposes of DimensionalData.@dim.\n\nExamples\n\nDimensionalData.@dim MyDim ToolsDim \"My dimension\" # Defines a new `ToolsDim <: ToolsDimension`\n\nSee also\n\nToolsDimension\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.AbstractTimeseries","page":"Home","title":"TimeseriesBase.TimeSeries.AbstractTimeseries","text":"AbstractTimeseries{T, N, B}\n\nA type alias for an AbstractDimArray with a time index.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.BinaryTimeseries","page":"Home","title":"TimeseriesBase.TimeSeries.BinaryTimeseries","text":"BinaryTimeseries\n\nA type alias for a time series of bits.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.IrregularIndex","page":"Home","title":"TimeseriesBase.TimeSeries.IrregularIndex","text":"IrregularIndex\n\nA type alias for an irregularly sampled dimension, wrapping an AbstractVector.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.IrregularTimeIndex","page":"Home","title":"TimeseriesBase.TimeSeries.IrregularTimeIndex","text":"IrregularTimeIndex\n\nA type alias for a tuple of dimensions containing a TimeIndex and any number of other dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.IrregularTimeseries","page":"Home","title":"TimeseriesBase.TimeSeries.IrregularTimeseries","text":"IrregularTimeseries\n\nA type alias for a potentially irregularly sampled time series.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.MultidimensionalTimeseries","page":"Home","title":"TimeseriesBase.TimeSeries.MultidimensionalTimeseries","text":"A multidimensional time series has a regular sampling over a dimension other than time; a one-dimensional time series can be thought of as a field over an even grid in 1 dimension that fluctuates over time.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.MultivariateTimeseries","page":"Home","title":"TimeseriesBase.TimeSeries.MultivariateTimeseries","text":"MultivariateTimeseries{T}\n\nA type alias for a multivariate time series (A matrix, with a first Ti dimension and an arbitrary second dimension).\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.RegularIndex","page":"Home","title":"TimeseriesBase.TimeSeries.RegularIndex","text":"RegularIndex\n\nA type alias for a regularly sampled dimension, wrapping an AbstractRange.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.RegularTimeIndex","page":"Home","title":"TimeseriesBase.TimeSeries.RegularTimeIndex","text":"RegularTimeIndex\n\nA type alias for a tuple of dimensions containing a TimeIndex and any number of other dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.RegularTimeseries","page":"Home","title":"TimeseriesBase.TimeSeries.RegularTimeseries","text":"RegularTimeseries{T, N, B}\n\nA type alias for a regularly sampled time series.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.SpikeTrain","page":"Home","title":"TimeseriesBase.TimeSeries.SpikeTrain","text":"SpikeTrain\n\nA type alias for a spike-train time series, which contains spike times in the time dimension and true for all values corresponding to a spike. The spike times can be retrieved with times(x).\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.TimeIndex","page":"Home","title":"TimeseriesBase.TimeSeries.TimeIndex","text":"TimeIndex\n\nA type alias for a tuple containing a time dimension and any number of other dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.UnivariateTimeseries","page":"Home","title":"TimeseriesBase.TimeSeries.UnivariateTimeseries","text":"UnivariateTimeseries{T}\n\nA type alias for a time series with one variable (a vector with only a Ti dimension).\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.ToolsArrays.Var","page":"Home","title":"TimeseriesBase.ToolsArrays.Var","text":"Var\n\nA DimensionalData.jl dimension representing the variables of a multivariate time series.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.TimeSeries.Timeseries-Tuple{Any, Any, Any, Vararg{DimensionalData.Dimensions.Dimension}}","page":"Home","title":"TimeseriesBase.TimeSeries.Timeseries","text":"Timeseries(x, t, v)\n\nConstructs a multivariate time series with time t, variable v, and data x.\n\nExamples\n\njulia> t = 1:100;\njulia> v = [:a, :b, :c];\njulia> x = rand(100, 3);\njulia> mts = Timeseries(x, t, v)\njulia> mts isa typeintersect(MultivariateTimeseries, RegularTimeseries)\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.TimeSeries.Timeseries-Tuple{Any, Any, Vararg{DimensionalData.Dimensions.Dimension}}","page":"Home","title":"TimeseriesBase.TimeSeries.Timeseries","text":"Timeseries(x, t)\n\nConstructs a univariate time series with time t and data x.\n\nExamples\n\njulia> using TimeseriesBase, Unitful;\njulia> t = 1:100\njulia> x = rand(100)\njulia> ts = Timeseries(x, t)\njulia> ts isa typeintersect(UnivariateTimeseries, RegularTimeseries)\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Spectra.AbstractSpectrum","page":"Home","title":"TimeseriesBase.Spectra.AbstractSpectrum","text":"AbstractSpectrum{T, N, B}\n\nA type alias for an AbstractToolsArray in which the first dimension is 洧녭requency.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.Spectra.FreqIndex","page":"Home","title":"TimeseriesBase.Spectra.FreqIndex","text":"FreqIndex\n\nA type alias for a tuple of dimensions, where the first dimension is of type FrequencyDim.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.Spectra.MultivariateSpectrum","page":"Home","title":"TimeseriesBase.Spectra.MultivariateSpectrum","text":"MultivariateSpectrum{T} = AbstractSpectrum{T, 2} where T\n\nA type alias for a multivariate spectrum.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.Spectra.RegularFreqIndex","page":"Home","title":"TimeseriesBase.Spectra.RegularFreqIndex","text":"RegularFreqIndex\n\nA type alias for a tuple of dimensions, where the first dimension is a regularly sampled 洧녭requency.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.Spectra.RegularSpectrum","page":"Home","title":"TimeseriesBase.Spectra.RegularSpectrum","text":"RegularSpectrum{T, N, B}\n\nA type alias for a spectrum with a regularly sampled frequency index.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.Spectra.UnivariateSpectrum","page":"Home","title":"TimeseriesBase.Spectra.UnivariateSpectrum","text":"UnivariateSpectrum{T} = AbstractSpectrum{T, 1} where T\n\nA type alias for a univariate spectrum.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.ToolsArrays.洧녭","page":"Home","title":"TimeseriesBase.ToolsArrays.洧녭","text":"洧녭\n\nA DimensionalData.jl dimension representing the frequency domain.\n\n\n\n\n\n","category":"type"},{"location":"#TimeseriesBase.Spectra.Spectrum-Tuple{Any, Any, Any}","page":"Home","title":"TimeseriesBase.Spectra.Spectrum","text":"Spectrum(f, v, x)\n\nConstructs a multivariate spectrum with frequencies f, variables v, and data x.\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Spectra.Spectrum-Tuple{Any, Any}","page":"Home","title":"TimeseriesBase.Spectra.Spectrum","text":"Spectrum(f, x)\n\nConstructs a univariate spectrum with frequencies f and data x.\n\n\n\n\n\n","category":"method"},{"location":"#IntervalSets.Interval-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, N, B}}","page":"Home","title":"IntervalSets.Interval","text":"IntervalSets.Interval(x::AbstractTimeseries)\n\nReturns an interval representing the range of the AbstractTimeseries x.\n\nExamples\n\njulia> using IntervalSets;\njulia> t = 1:100;\njulia> x = rand(100);\njulia> ts = Timeseries(x, t);\njulia> IntervalSets.Interval(ts) == (1..100)\n\n\n\n\n\n","category":"method"},{"location":"#Base.step-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:(DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}), B} where {T, N, B}}","page":"Home","title":"Base.step","text":"step(x::RegularTimeseries)\n\nReturns the step size (time increment) of a regularly sampled RegularTimeseries.\n\nExamples\n\njulia> t = 1:100;\njulia> x = rand(100);\njulia> rts = Timeseries(x, t);\njulia> step(rts) == 1\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.align-Tuple{AbstractDimArray, Any, Union{Tuple, AbstractVector}}","page":"Home","title":"TimeseriesBase.Utils.align","text":"align(x::AbstractDimArray, ts, dt; dims = 1)\n\nAlign a DimArray x to each of a set of dimension values ts, selecting a window given by dt centered at each element of ts. dt can be a two-element vector/tuple, or an interval. The dims argument specifies the dimension along which the alignment is performed. Each element of the resulting DimArray is an aligned portion of the original x.\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.buffer-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:(DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}), B} where {T, N, B}, Vararg{Any}}","page":"Home","title":"TimeseriesBase.Utils.buffer","text":"buffer(x::RegularTimeseries, n::Integer, p::Integer; kwargs...)\n\nBuffer a time series x with a given window length and overlap between successive buffers.\n\nArguments\n\nx: The regular time series to be buffered.\nn: The number of samples in each buffer.\np: The number of samples of overlap betweeen the buffers.\n0 indicates no overlap\n+2 indicates 2 samples of overlap between successive buffers\n-2 indicates 2 samples of gap between buffers\n\nSee also: window, delayembed, coarsegrain\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.centralderiv!-Tuple","page":"Home","title":"TimeseriesBase.Utils.centralderiv!","text":"centralderiv!(x::RegularTimeseries; kwargs...)\n\nCompute the central derivative of a regular time series x, in-place. See centraldiff! for available keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.centralderiv-Tuple","page":"Home","title":"TimeseriesBase.Utils.centralderiv","text":"centralderiv(x::AbstractTimeseries)\n\nCompute the central derivative of a time series x. See centraldiff for available keyword arguments. Also c.f. centralderiv!.\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.centraldiff!-Tuple","page":"Home","title":"TimeseriesBase.Utils.centraldiff!","text":"centraldiff!(x::RegularTimeseries; dims=洧노, grad=-)\n\nCompute the central difference of a regular time series x, in-place. The first and last elements are set to the forward and backward difference, respectively. The dimension to perform differencing over can be specified as dims, and the differencing function can be specified as grad (defaulting to the euclidean distance, -)\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.centraldiff-Tuple","page":"Home","title":"TimeseriesBase.Utils.centraldiff","text":"centraldiff(x::RegularTimeseries; dims=洧노, grad=-)\n\nCompute the central difference of a regular time series x. The first and last elements are set to the forward and backward difference, respectively. The dimension to perform differencing over can be specified as dims, and the differencing function can be specified as grad (defaulting to the euclidean distance, -) See centraldiff!.\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.coarsegrain-Tuple{AbstractArray}","page":"Home","title":"TimeseriesBase.Utils.coarsegrain","text":"coarsegrain(X::AbstractArray; dims = nothing, newdim=ndims(X)+1)\n\nCoarse-grain an array by taking every second element over the given dimensions dims and concatenating them in the dimension newdim. dims are coarse-grained in sequence, from last to first. If dims is not specified, we iterate over all dimensions that are not newdim. If the array has an odd number of slices in any dims, the last slice is discarded. This is more flexibile than the conventional, mean-based definition of coarse graining: it can be used to generate coarse-grained distributions from an array. To recover this conventional mean-based coarse-graining:\n\n    C = coarsegrain(X)\n    mean(C, dims=ndims(C))\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.delayembed","page":"Home","title":"TimeseriesBase.Utils.delayembed","text":"delayembed(x::UnivariateRegular, n::Integer, 픣::Integer, p::Integer=1; kwargs...)\n\nDelay embed a univariate time series x with a given dimension n, delay 픣, and skip length of p\n\nArguments\n\nx: The regular time series to be delay embedded.\nn: The embedding dimension, i.e., the number of samples in each embedded vector.\n픣: The number of original sampling periods between each sample in the embedded vectors.\np: The number of samples to skip between each successive embedded vector.\n\nSee also: buffer, window\n\n\n\n\n\n","category":"function"},{"location":"#TimeseriesBase.Utils.duration-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, N, B}}","page":"Home","title":"TimeseriesBase.Utils.duration","text":"duration(x::AbstractTimeseries)\n\nReturns the duration of the AbstractTimeseries x.\n\nExamples\n\njulia> t = 1:100;\njulia> x = rand(100);\njulia> ts = Timeseries(x, t);\njulia> TimeseriesBase.duration(ts) == 99\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.rectifytime-Tuple{Vararg{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, N, B}}}","page":"Home","title":"TimeseriesBase.Utils.rectifytime","text":"rectifytime(X::AbstractTimeseries; tol = 6, zero = false)\n\nRectifies the time values of an IrregularTimeseries. Checks if the time step of the input time series is approximately constant. If it is, the function rounds the time step and constructs a RegularTimeseries with range time indices. If the time step is not approximately constant, a warning is issued and the rectification is skipped.\n\nArguments\n\nX::IrregularTimeseries: The input time series.\ntol::Int: The number of significant figures for rounding the time step. Default is 6.\nzero::Bool: If true, the rectified time values will start from zero. Default is false.\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.samplingperiod-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:(DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}), B} where {T, N, B}}","page":"Home","title":"TimeseriesBase.Utils.samplingperiod","text":"samplingperiod(x::RegularTimeseries)\n\nReturns the sampling period (step size) of a regularly sampled RegularTimeseries.\n\nExamples\n\njulia> t = 1:100;\njulia> x = rand(100);\njulia> rts = Timeseries(x, t);\njulia> samplingperiod(rts) == 1\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.samplingrate-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:(DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}), B} where {T, N, B}}","page":"Home","title":"TimeseriesBase.Utils.samplingrate","text":"samplingrate(x::RegularTimeseries)\n\nReturns the sampling rate (inverse of the step size) of a regularly sampled RegularTimeseries.\n\nExamples\n\njulia> t = 1:100;\njulia> x = rand(100);\njulia> rts = Timeseries(x, t);\njulia> samplingrate(rts) == 1\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.stitch-Tuple{AbstractToolsArray{T, 1, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:(DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}), B} where {T, B}, AbstractToolsArray{T, 1, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:(DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}), B} where {T, B}}","page":"Home","title":"TimeseriesBase.Utils.stitch","text":"stitch(x, args...)\n\nStitch multiple time series together by concatenating along the time dimension generating new contiguous time indices. The time series must be of the same type (UnivariateRegular, MultivariateRegular, or AbstractArray), and the sampling period and dimensions of the data arrays must match. If the arguments are `MultivariateRegular, they must have the same dimensions (except for the time dimension).\n\nArguments\n\nX: The first time series.\nargs...: Additional time series.\n\nReturns\n\nA new time series containing the concatenated data.\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.times-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, N, B}}","page":"Home","title":"TimeseriesBase.Utils.times","text":"times(x::AbstractTimeseries)\n\nReturns the time indices of the AbstractTimeseries x.\n\nExamples\n\njulia> t = 1:100;\njulia> x = rand(100);\njulia> ts = Timeseries(x, t);\njulia> times(ts) == t\n\n\n\n\n\n","category":"method"},{"location":"#TimeseriesBase.Utils.window","page":"Home","title":"TimeseriesBase.Utils.window","text":"window(x::RegularTimeseries, n::Integer, p::Integer; kwargs...)\n\nWindow a time series x with a given window length and step between successive windows.\n\nArguments\n\nx: The regular time series to be windows.\nn: The number of samples in each window.\np: The number of samples to slide each successive window.\n\nSee also: buffer, delayembed, coarsegrain\n\n\n\n\n\n","category":"function"}]
}
